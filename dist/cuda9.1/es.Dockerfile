# Code generated by gomplate; DO NOT EDIT.
# This file generated by gomplate at
# Fri, 04 Dec 2020 15:39:47 UTC
# using data from cuda9.1.yaml

ARG zm_version

FROM nvidia/cuda:9.1-devel-ubuntu16.04 AS opencv-build

ENV	\
    DEBIAN_FRONTEND="noninteractive" \
    OPENCV_VERSION="4.1.2" \
    PYTHON_VERSION="3.9" \
    OPENCV_PATH="/opencv"

RUN \
    # Add python ppa https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys "6A755776" && \
    export $(cat /etc/os-release | grep UBUNTU_CODENAME) && \
    echo "deb http://ppa.launchpad.net/deadsnakes/ppa/ubuntu ${UBUNTU_CODENAME} main" > \
      /etc/apt/sources.list.d/python.list && \
    echo "deb-src http://ppa.launchpad.net/deadsnakes/ppa/ubuntu ${UBUNTU_CODENAME} main" >> \
      /etc/apt/sources.list.d/python.list && \
    apt-get update && \
    # Install python
    apt-get install -y --no-install-recommends \
      curl \
      python${PYTHON_VERSION} \
      python${PYTHON_VERSION}-distutils \
    && \
    ln -s /usr/bin/python${PYTHON_VERSION} /usr/bin/python3 && \
    curl "https://bootstrap.pypa.io/get-pip.py" | python3 && \
    # Add ffmpeg ppa https://launchpad.net/~jonathonf/+archive/ubuntu/ffmpeg-4
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys "F06FC659" && \
    export $(cat /etc/os-release | grep UBUNTU_CODENAME) && \
    echo "deb http://ppa.launchpad.net/jonathonf/ffmpeg-4/ubuntu ${UBUNTU_CODENAME} main" > \
      /etc/apt/sources.list.d/ffmpeg.list && \
    echo "deb-src http://ppa.launchpad.net/jonathonf/ffmpeg-4/ubuntu ${UBUNTU_CODENAME} main" >> \
      /etc/apt/sources.list.d/ffmpeg.list && \
    apt-get update && \
    # Install opencv build dependencies
    deps="\
      build-essential \
      ca-certificates \
      ccache \
      cmake \
      doxygen \
      ffmpeg \
      gfortran \
      git-core \
      libatlas-dev \
      libavcodec-dev \
      libavformat-dev \
      libavresample-dev \
      libdc1394-22-dev \
      libeigen3-dev \
      libfaac-dev \
      libgflags-dev \
      libgoogle-glog-dev \
      libgphoto2-dev \
      libgstreamer-plugins-base1.0-dev \
      libgstreamer1.0-dev \
      libhdf5-dev \
      libjpeg-dev \
      liblapack-dev \
      liblapacke-dev \
      libleptonica-dev \
      libmp3lame-dev \
      libopenblas-dev \
      libopencore-amrnb-dev \
      libopencore-amrwb-dev \
      libopenexr-dev \
      libopenjp2-7-dev \
      libpng-dev \
      libprotobuf-dev \
      libswscale-dev \
      libtbb-dev \
      libtesseract-dev \
      libtheora-dev \
      libtiff-dev \
      libv4l-dev \
      libvorbis-dev \
      libvtk6-dev \
      libwebp-dev \
      libx264-dev \
      libxine2-dev \
      libxvidcore-dev \
      pkg-config \
      protobuf-compiler \
      python${PYTHON_VERSION}-dev \
      unzip \
      yasm \
      zlib1g-dev \
    " && \
    apt-get install -y --no-install-recommends ${deps} && \
    # Install numpy && \
    python3 -m pip install numpy && \
    # Workaround for openblas lapacke
    # See: https://github.com/opencv/opencv/issues/9953
    ln -s /usr/include/lapacke.h /usr/include/openblas/ && \
    # Build opencv https://opencv.org
    git clone -b "${OPENCV_VERSION}" --depth 1 \
      "https://github.com/opencv/opencv.git" /tmp/opencv && \
    git clone -b "${OPENCV_VERSION}" --depth 1 \
      "https://github.com/opencv/opencv_contrib.git" /tmp/opencv/contrib && \
    mkdir -p /tmp/opencv/build && \
    cd /tmp/opencv/build && \
    cmake \
      -BUILD_SHARED_LIBS=ON \
      -DBUILD_EXAMPLES=OFF \
      -DBUILD_FAT_JAVA_LIB=OFF \
      -DBUILD_JAVA=OFF \
      -DBUILD_OBJC=OFF \
      -DBUILD_opencv_python2=OFF \
      -DBUILD_opencv_python3=ON \
      -DCMAKE_BUILD_TYPE=RELEASE \
      -DCMAKE_INSTALL_PREFIX=${OPENCV_PATH} \
      -DENABLE_CCACHE=ON \
      -DOPENCV_ENABLE_NONFREE=ON \
      -DOPENCV_EXTRA_MODULES_PATH=/tmp/opencv/contrib/modules \
      -DWITH_CUDA=ON \
      -DWITH_CUBLAS=ON \
      -DWITH_CUFFT=ON \
      -DWITH_NVCUVID=ON \
      -DCUDA_FAST_MATH=1 \
      -DENABLE_FAST_MATH=ON \
      -DWITH_FFMPEG=ON \
      -DWITH_OPENEXR=ON \
      -DWITH_OPENMP=ON \
      -DWITH_TBB=ON \
      /tmp/opencv \
    && \
    make -j$(nproc) && \
    make install && \
    # Cleanup
    apt-get remove -y \
      curl \
      python${PYTHON_VERSION} \
      python${PYTHON_VERSION}-distutils \
    && \
    apt-get remove -y ${deps} && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    truncate -s 0 /var/log/*log

FROM nvidia/cuda:9.1-devel-ubuntu16.04 AS face_recognition-build

ENV \
    DEBIAN_FRONTEND="noninteractive" \
    FACE_RECOGNITION_VERSION="1.3.0" \
    PYTHON_VERSION="3.9" \
    FACE_RECOGNITION_PATH="/face_recognition"

RUN \
    # Add python ppa https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys "6A755776" && \
    export $(cat /etc/os-release | grep UBUNTU_CODENAME) && \
    echo "deb http://ppa.launchpad.net/deadsnakes/ppa/ubuntu ${UBUNTU_CODENAME} main" > \
      /etc/apt/sources.list.d/python.list && \
    echo "deb-src http://ppa.launchpad.net/deadsnakes/ppa/ubuntu ${UBUNTU_CODENAME} main" >> \
      /etc/apt/sources.list.d/python.list && \
    apt-get update && \
    # Install python
    apt-get install -y --no-install-recommends \
      curl \
      python${PYTHON_VERSION} \
      python${PYTHON_VERSION}-distutils \
    && \
    ln -s /usr/bin/python${PYTHON_VERSION} /usr/bin/python3 && \
    curl "https://bootstrap.pypa.io/get-pip.py" | python3 && \
    # Install face_recognition build dependencies
    deps="\
      build-essential \
      ccache \
      cmake \
      libblas-dev \
      libgif-dev \
      libjpeg-dev \
      liblapack-dev \
      liblapacke-dev \
      libopenblas-dev \
      libpng-dev \
      python${PYTHON_VERSION}-dev \
    " && \
    apt-get install -y --no-install-recommends ${deps} && \
    # Build face_recognition https://github.com/ageitgey/face_recognition
    mkdir -p /tmp/face_recognition && \
    python3 -m pip install --no-cache-dir --root /tmp/face_recognition -v \
      numpy \
      mkl_fft \
      face_recognition==${FACE_RECOGNITION_VERSION} \
    && \
    mv /tmp/face_recognition/usr/local ${FACE_RECOGNITION_PATH} && \
    # Cleanup
    apt-get remove -y \
      curl \
      python${PYTHON_VERSION} \
      python${PYTHON_VERSION}-distutils \
    && \
    apt-get remove -y ${deps} && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    truncate -s 0 /var/log/*log

FROM zoneminder:${zm_version}-cuda9.1

ARG zmeventnotification_version
ARG DEBIAN_FRONTEND="noninteractive"

ENV \
    ZMEVENTNOTIFICATION_VERSION="${zmeventnotification_version}" \
    OPENCV_VERSION="4.1.2" \
    FACE_RECOGNITION_VERSION="1.3.0" \
    PYTHON_VERSION="3.9"

# Copy opencv files
COPY --from=opencv-build /opencv/ /usr/local/
# Copy face_recognition files
COPY --from=face_recognition-build /face_recognition/ /usr/local/

RUN \
    # Add python ppa https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys "6A755776" && \
    export $(cat /etc/os-release | grep UBUNTU_CODENAME) && \
    echo "deb http://ppa.launchpad.net/deadsnakes/ppa/ubuntu ${UBUNTU_CODENAME} main" > \
      /etc/apt/sources.list.d/python.list && \
    echo "deb-src http://ppa.launchpad.net/deadsnakes/ppa/ubuntu ${UBUNTU_CODENAME} main" >> \
      /etc/apt/sources.list.d/python.list && \
    apt-get update && \
    # Install python
    apt-get install -y --no-install-recommends \
      curl \
      python${PYTHON_VERSION} \
      python${PYTHON_VERSION}-distutils \
    && \
    ln -s /usr/bin/python${PYTHON_VERSION} /usr/bin/python3 && \
    curl "https://bootstrap.pypa.io/get-pip.py" | python3 && \
    # Install dependenceis
    apt-get install -y --no-install-recommends \
      # opencv dependencies
      libatlas3-base \
      libavcodec58 \
      libavformat58 \
      libavresample4 \
      libdc1394-22 \
      libfaac0 \
      libgflags2v5 \
      libgoogle-glog0v5 \
      libgphoto2-6 \
      libgstreamer-plugins-base1.0-0 \
      libgstreamer1.0-0 \
      libhdf5-10 \
      libjpeg8 \
      liblapack3 \
      liblapacke \
      libmp3lame0 \
      libopenblas-base \
      libopencore-amrnb0 \
      libopencore-amrwb0 \
      libopenexr22 \
      libopenjp2-7 \
      libpng12-0 \
      libprotobuf9v5 \
      libswscale5 \
      libtbb2 \
      libtesseract3 \
      libtheora0 \
      libtiff5 \
      libv4l-0 \
      libvorbis0a \
      libvtk6.2 \
      libwebp5 \
      libx264-155 \
      libxine2 \
      libxvidcore4 \
      zlib1g \
      # face_recognition dependencies
      libblas3 \
      libgif7 \
      libjpeg8 \
      liblapack3 \
      liblapacke \
      libopenblas-base \
      libpng12-0 \
      # zmeventnotification dependencies
      build-essential \
      git-core \
      libcrypt-eksblowfish-perl \
      libcrypt-mysql-perl \
      libjson-perl \
      libmodule-build-perl \
      libyaml-perl \
      wget \
    && \
    # Install perl dependencies for zmeventnotification
    perl -MCPAN -e "force install Config::IniFiles" && \
    perl -MCPAN -e "force install Crypt::Eksblowfish::Bcrypt" && \
    perl -MCPAN -e "force install Crypt::MySQL" && \
    perl -MCPAN -e "force install LWP::Protocol::https" && \
    perl -MCPAN -e "force install Net::MQTT::Simple::Auth" && \
    perl -MCPAN -e "force install Net::MQTT::Simple" && \
    perl -MCPAN -e "force install Net::WebSocket::Server" && \
    perl -MCPAN -e "force install Time::Piece" && \
    # Install zmeventnotification https://github.com/pliablepixels/zmeventnotification
    git clone --depth 1 -b "v${ZMEVENTNOTIFICATION_VERSION}" \
      "https://github.com/pliablepixels/zmeventnotification.git" \
      /tmp/zmeventnotification \
    && \
    cd /tmp/zmeventnotification && \
    ./install.sh \
      --no-interactive \
      --install-config \
      --install-es \
      --install-hook \
    && \
    # Cleanup
    apt-get remove -y \
      build-essential \
      git-core \
      wget \
    && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    truncate -s 0 /var/log/*log

COPY ./es-entrypoint.sh /es-entrypoint.sh

ENTRYPOINT [ "/es-entrypoint.sh" ]
CMD ["/usr/bin/supervisord"]

VOLUME [ "/var/lib/zmeventnotification/images", "/var/lib/zmeventnotification/known_faces", "/var/lib/zmeventnotification/unknown_faces" ]
EXPOSE 9000